package resource;
import java.util.*;

public class SubSetSum {
		public static boolean subSetDP(Integer[] A, int sum) {
			boolean[][] solution = new boolean[A.length + 1][sum + 1];		
			ArrayList<Integer> al = new ArrayList<Integer>();
			for(int i=0;i<=A.length-1;i++){
				al.add(A[i]);
//				System.out.println("al="+al.get(i));
			}			
			int x=A[A.length-1]+1;
			al.add(x);
			

			// if sum is 0 the we can make the empty subset to make sum 0
					for(int i=0;i<=A.length;i++){
						solution[i][0]=true;
					}
			// if sum is not zero and subset is 0, we can't make it 
			for(int i=1;i<=sum;i++){
				solution[0][i]=false;
			}

			for (int j=1; j<=sum; j++) {
				for (int i=1; i<=A.length; i++){
					//System.out.println("\t"+solution[i-1][j]+"\t"+solution[i-1][j-1]+"\t"+al.get(i));
					if (j < al.get(i)){             
						solution[i][j] = solution[i-1][j];
						//System.out.println(solution[i][j]);
					}
					else {                    
						solution[i][j] = solution[i-1][j-1] || solution[i-1][j-al.get(i)];
					}
				}
			}    
//			System.out.println();
//			for (int j=1; j<=sum; j++) {
//				for (int i=1; i<=A.length; i++){
//					System.out.print(solution[i][j]+"\t");
//				}
//				System.out.println();
//			}      
//
			
			
			if (solution[A.length][sum]) {
				System.out.println("\n\n The subset is:");
				int j = sum;
				for (int i=A.length; i>=1; i--) {
					if (!solution[i-1][j]){
						System.out.println("\tA[ "+i +"] = "+ A[i]);
						j -= A[i];
						}
				}
			}
		
			return solution[A.length][sum];
		}

		public void sort(Integer[] unsortedArray) {
			int gLen=unsortedArray.length;
			if(gLen <= 1) return;
			int middle=(unsortedArray.length)/2;
			Integer[] sortedOne=new Integer[middle];
			Integer[] sortedTwo=new Integer[gLen-middle];
			System.arraycopy(unsortedArray, 0, sortedOne, 0, middle);
			System.arraycopy(unsortedArray, sortedOne.length, sortedTwo, 0, sortedTwo.length);
			sort(sortedOne);
			sort(sortedTwo);
			merge(sortedOne,sortedTwo,unsortedArray);
		}
		
		
		public void merge(Integer[] sortedOne, Integer[] sortedTwo, Integer[] unsortedArray) {
			
			int a=0,b=0;
			int i=sortedOne.length, j=sortedTwo.length, k=0;
			while(a<i & b<j) {
				if(sortedOne[a] > sortedTwo[b]) {
					unsortedArray[k++]=sortedTwo[b++];
				} else { 
					unsortedArray[k++]=sortedOne[a++];		
				}
			}	
			int firstPos=sortedOne.length-a, secondPos=k+firstPos;
			System.arraycopy(sortedOne, a, unsortedArray, k, firstPos);
			System.arraycopy(sortedTwo, b, unsortedArray, secondPos, sortedTwo.length-b);
		}
		
		public static void main(String[] args) {
			//Integer[] A = new Integer[] { 0,2,7,1,3,16  };//,17  ,18  ,19  ,20  ,21  ,22  ,23  ,24  ,25  ,26  ,27  ,28  ,29  ,30  ,31  ,32  ,33  ,34  ,35  ,36  ,37  ,38  ,39  ,40  ,41  ,42  ,43  ,44  ,45  ,46  ,47  ,48  ,49  ,50  ,51  ,52  ,53  ,54  ,55  ,56  ,57  ,58  ,59  ,60  ,61  ,62  ,63  ,64  ,65  ,66  ,67  ,68  ,69  ,70  ,71  ,72  ,73  ,74  ,75  ,76  ,77  ,78  ,79  ,80  ,81  ,82  ,83  ,84  ,85  ,86  ,87  ,88  ,89  ,90  ,91  ,92  ,93  ,94  ,95  ,96  ,97  ,98  ,99  ,100  ,101  ,102  ,103  ,104  ,105  ,106  ,107  ,108  ,109  ,110  ,111  ,112  ,113  ,114  ,115  ,116  ,117  ,118  ,119  ,120  ,121  ,122  ,123  ,124  ,125  ,126  ,127  ,128  ,129  ,130  ,131  ,132  ,133  ,134  ,135  ,136  ,137  ,138  ,139  ,140  ,141  ,142  ,143  ,144  ,145  ,146  ,147  ,148  ,149  ,150  ,151  ,152  ,153  ,154  ,155  ,156  ,157  ,158  ,159  ,160  ,161  ,162  ,163  ,164  ,165  ,166  ,167  ,168  ,169  ,170  ,171  ,172  ,173  ,174  ,175  ,176  ,177  ,178  ,179  ,180  ,181  ,182  ,183  ,184  ,185  ,186  ,187  ,188  ,189  ,190  ,191  ,192  ,193  ,194  ,195  ,196  ,197  ,198  ,199  ,200  ,201  ,202  ,203  ,204  ,205  ,206  ,207  ,208  ,209  ,210  ,211  ,212  ,213  ,214  ,215  ,216  ,217  ,218  ,219  ,220  ,221  ,222  ,223  ,224  ,225  ,226  ,227  ,228  ,229  ,230  ,231  ,232  ,233  ,234  ,235  ,236  ,237  ,238  ,239  ,240  ,241  ,242  ,243  ,244  ,245  ,246  ,247  ,248  ,249  ,250  ,251  ,252  ,253  ,254  ,255  ,256  ,257  ,258  ,259  ,260  ,261  ,262  ,263  ,264  ,265  ,266  ,267  ,268  ,269  ,270  ,271  ,272  ,273  ,274  ,275  ,276  ,277  ,278  ,279  ,280  ,281  ,282  ,283  ,284  ,285  ,286  ,287  ,288  ,289  ,290  ,291  ,292  ,293  ,294  ,295  ,296  ,297  ,298  ,299  ,300  ,301  ,302  ,303  ,304  ,305  ,306  ,307  ,308  ,309  ,310  ,311  ,312  ,313  ,314  ,315  ,316  ,317  ,318  ,319  ,320  ,321  ,322  ,323  ,324  ,325  ,326  ,327  ,328  ,329  ,330  ,331  ,332  ,333  ,334  ,335  ,336  ,337  ,338  ,339  ,340  ,341  ,342  ,343  ,344  ,345  ,346  ,347  ,348  ,349  ,350  ,351  ,352  ,353  ,354  ,355  ,356  ,357  ,358  ,359  ,360  ,361  ,362  ,363  ,364  ,365  ,366  ,367  ,368  ,369  ,370  ,371  ,372  ,373  ,374  ,375  ,376  ,377  ,378  ,379  ,380  ,381  ,382  ,383  ,384  ,385  ,386  ,387  ,388  ,389  ,390  ,391  ,392  ,393  ,394  ,395  ,396  ,397  ,398  ,399  ,400  ,401  ,402  ,403  ,404  ,405  ,406  ,407  ,408  ,409  ,410  ,411  ,412  ,413  ,414  ,415  ,416  ,417  ,418  ,419  ,420  ,421  ,422  ,423  ,424  ,425  ,426  ,427  ,428  ,429  ,430  ,431  ,432  ,433  ,434  ,435  ,436  ,437  ,438  ,439  ,440  ,441  ,442  ,443  ,444  ,445  ,446  ,447  ,448  ,449  ,450  ,451  ,452  ,453  ,454  ,455  ,456  ,457  ,458  ,459  ,460  ,461  ,462  ,463  ,464  ,465  ,466  ,467  ,468  ,469  ,470  ,471  ,472  ,473  ,474  ,475  ,476  ,477  ,478  ,479  ,480  ,481  ,482  ,483  ,484  ,485  ,486  ,487  ,488  ,489  ,490  ,491  ,492  ,493  ,494  ,495  ,496  ,497  ,498  ,499  ,500   };
			Integer[] A = new Integer[] { 0,2,7,1,3,4,5,6,8,9,10,11,12,13,14,15,16  ,17  ,18  ,19  ,20  ,21  ,22  ,23  ,24  ,25  ,26  ,27  ,28  ,29  ,30  ,31  ,32  ,33  ,34  ,35  ,36  ,37  ,38  ,39  ,40  ,41  ,42  ,43  ,44  ,45  ,46  ,47  ,48  ,49  ,50  ,51  ,52  ,53  ,54  ,55  ,56  ,57  ,58  ,59  ,60  ,61  ,62  ,63  ,64  ,65  ,66  ,67  ,68  ,69  ,70  ,71  ,72  ,73  ,74  ,75  ,76  ,77  ,78  ,79  ,80  ,81  ,82  ,83  ,84  ,85  ,86  ,87  ,88  ,89  ,90  ,91  ,92  ,93  ,94  ,95  ,96  ,97  ,98  ,99  ,100  ,101  ,102  ,103  ,104  ,105  ,106  ,107  ,108  ,109  ,110  ,111  ,112  ,113  ,114  ,115  ,116  ,117  ,118  ,119  ,120  ,121  ,122  ,123  ,124  ,125  ,126  ,127  ,128  ,129  ,130  ,131  ,132  ,133  ,134  ,135  ,136  ,137  ,138  ,139  ,140  ,141  ,142  ,143  ,144  ,145  ,146  ,147  ,148  ,149  ,150  ,151  ,152  ,153  ,154  ,155  ,156  ,157  ,158  ,159  ,160  ,161  ,162  ,163  ,164  ,165  ,166  ,167  ,168  ,169  ,170  ,171  ,172  ,173  ,174  ,175  ,176  ,177  ,178  ,179  ,180  ,181  ,182  ,183  ,184  ,185  ,186  ,187  ,188  ,189  ,190  ,191  ,192  ,193  ,194  ,195  ,196  ,197  ,198  ,199  ,200  ,201  ,202  ,203  ,204  ,205  ,206  ,207  ,208  ,209  ,210  ,211  ,212  ,213  ,214  ,215  ,216  ,217  ,218  ,219  ,220  ,221  ,222  ,223  ,224  ,225  ,226  ,227  ,228  ,229  ,230  ,231  ,232  ,233  ,234  ,235  ,236  ,237  ,238  ,239  ,240  ,241  ,242  ,243  ,244  ,245  ,246  ,247  ,248  ,249  ,250  ,251  ,252  ,253  ,254  ,255  ,256  ,257  ,258  ,259  ,260  ,261  ,262  ,263  ,264  ,265  ,266  ,267  ,268  ,269  ,270  ,271  ,272  ,273  ,274  ,275  ,276  ,277  ,278  ,279  ,280  ,281  ,282  ,283  ,284  ,285  ,286  ,287  ,288  ,289  ,290  ,291  ,292  ,293  ,294  ,295  ,296  ,297  ,298  ,299  ,300  ,301  ,302  ,303  ,304  ,305  ,306  ,307  ,308  ,309  ,310  ,311  ,312  ,313  ,314  ,315  ,316  ,317  ,318  ,319  ,320  ,321  ,322  ,323  ,324  ,325  ,326  ,327  ,328  ,329  ,330  ,331  ,332  ,333  ,334  ,335  ,336  ,337  ,338  ,339  ,340  ,341  ,342  ,343  ,344  ,345  ,346  ,347  ,348  ,349  ,350  ,351  ,352  ,353  ,354  ,355  ,356  ,357  ,358  ,359  ,360  ,361  ,362  ,363  ,364  ,365  ,366  ,367  ,368  ,369  ,370  ,371  ,372  ,373  ,374  ,375  ,376  ,377  ,378  ,379  ,380  ,381  ,382  ,383  ,384  ,385  ,386  ,387  ,388  ,389  ,390  ,391  ,392  ,393  ,394  ,395  ,396  ,397  ,398  ,399  ,400  ,401  ,402  ,403  ,404  ,405  ,406  ,407  ,408  ,409  ,410  ,411  ,412  ,413  ,414  ,415  ,416  ,417  ,418  ,419  ,420  ,421  ,422  ,423  ,424  ,425  ,426  ,427  ,428  ,429  ,430  ,431  ,432  ,433  ,434  ,435  ,436  ,437  ,438  ,439  ,440  ,441  ,442  ,443  ,444  ,445  ,446  ,447  ,448  ,449  ,450  ,451  ,452  ,453  ,454  ,455  ,456  ,457  ,458  ,459  ,460  ,461  ,462  ,463  ,464  ,465  ,466  ,467  ,468  ,469  ,470  ,471  ,472  ,473  ,474  ,475  ,476  ,477  ,478  ,479  ,480  ,481  ,482  ,483  ,484  ,485  ,486  ,487  ,488  ,489  ,490  ,491  ,492  ,493  ,494  ,495  ,496  ,497  ,498  ,499  ,500   };
			int x =0;
			int[] B={5,6,9,7,2000,468, 154,498500, 8501, 125250,498502, 498503, 498504, 498505, 498506, 498507, 498508, 498509, 498510, 498511, 498512, 498513, 498514, 498515, 498516, 498517, 498518, 498519, 498520,
					498521, 498522, 498523, 498524, 498525, 498526, 498527, 498528, 498529, 498530, 498531, 498532, 498533, 498534, 498535, 498536, 498537, 498538, 498539, 498540, 498541,
					498542, 498543, 498544, 498545, 498546, 498547, 498548, 498549, 498550, 498551, 498552, 498553, 498554, 498555, 498556, 498557, 498558, 498559, 498560, 498561, 498562,
					498563, 498564, 498565, 498566, 498567, 498568, 498569, 498570, 498571, 498572, 498573, 498574, 498575, 498576, 498577, 498578, 498579, 498580, 498581, 498582, 498583,
					498584, 498585, 498586, 498587, 498588, 498589, 498590, 498591, 498592, 498593, 498594, 498595, 498596, 498597, 498598, 498599, 498600, 498601, 498602, 498603, 498604,
					498605, 498606, 498607, 498608, 498609, 498610, 498611, 498612, 498613, 498614, 498615, 498616, 498617, 498618, 498619, 498620, 498621, 498622, 498623, 498624, 498625,
					498626, 498627, 498628, 498629, 498630, 498631, 498632, 498633, 498634, 498635, 498636, 498637, 498638, 498639, 498640, 498641, 498642, 498643, 498644, 498645, 498646,
					498647, 498648, 498649, 498650, 498651, 498652, 498653, 498654, 498655, 498656, 498657, 498658, 498659, 498660, 498661, 498662, 498663, 498664, 498665, 498666, 498667,
					498668, 498669, 498670, 498671, 498672, 498673, 498674, 498675, 498676, 498677, 498678, 498679, 498680, 498681, 498682, 498683, 498684, 498685, 498686, 498687, 498688,
					498689, 498690, 498691, 498692, 498693, 498694, 498695, 498696, 498697, 498698, 498699, 498700, 498701, 498702, 498703, 498704, 498705, 498706, 498707, 498708, 498709,
					498710, 498711, 498712, 498713, 498714, 498715, 498716, 498717, 498718, 498719, 498720, 498721, 498722, 498723, 498724, 498725, 498726, 498727, 498728, 498729, 498730,
					498731, 498732, 498733, 498734, 498735, 498736, 498737, 498738, 498739, 498740, 498741, 498742, 498743, 498744, 498745, 498746, 498747, 498748, 498749, 498750, 498751,
					498752, 498753, 498754, 498755, 498756, 498757, 498758, 498759, 498760, 498761, 498762, 498763, 498764, 498765, 498766, 498767, 498768, 498769, 498770, 498771, 498772,
					498773, 498774, 498775, 498776, 498777, 498778, 498779, 498780, 498781, 498782, 498783, 498784, 498785, 498786, 498787, 498788, 498789, 498790, 498791, 498792, 498793,
					498794, 498795, 498796, 498797, 498798, 498799, 498800, 498801, 498802, 498803, 498804, 498805, 498806, 498807, 498808, 498809, 498810, 498811, 498812, 498813, 498814,
					498815, 498816, 498817, 498818, 498819, 498820, 498821, 498822, 498823, 498824, 498825, 498826, 498827, 498828, 498829, 498830, 498831, 498832, 498833, 498834, 498835,
					498836, 498837, 498838, 498839, 498840, 498841, 498842, 498843, 498844, 498845, 498846, 498847, 498848, 498849, 498850, 498851, 498852, 498853, 498854, 498855, 498856,
					498857, 498858, 498859, 498860, 498861, 498862, 498863, 498864, 498865, 498866, 498867, 498868, 498869, 498870, 498871, 498872, 498873, 498874, 498875, 498876, 498877,
					498878, 498879, 498880, 498881, 498882, 498883, 498884, 498885, 498886, 498887, 498888, 498889, 498890, 498891, 498892, 498893, 498894, 498895, 498896, 498897, 498898,
					498899, 498900, 498901, 498902, 498903, 498904, 498905, 498906, 498907, 498908, 498909, 498910, 498911, 498912, 498913, 498914, 498915, 498916, 498917, 498918, 498919,
					498920, 498921, 498922, 498923, 498924, 498925, 498926, 498927, 498928, 498929, 498930, 498931, 498932, 498933, 498934, 498935, 498936, 498937, 498938, 498939, 498940,
					498941, 498942, 498943, 498944, 498945, 498946, 498947, 498948, 498949, 498950, 498951, 498952, 498953, 498954, 498955, 498956, 498957, 498958, 498959, 498960, 498961,
					498962, 498963, 498964, 498965, 498966, 498967, 498968, 498969, 498970, 498971, 498972, 498973, 498974, 498975, 498976, 498977, 498978, 498979, 498980, 498981, 498982,
					498983, 498984, 498985, 498986, 498987, 498988, 498989, 498990, 498991, 498992, 498993, 498994, 498995, 498996, 498997, 498998, 498999, 499000, 499001, 499002, 499003,
					499004, 499005, 499006, 499007, 499008, 499009, 499010, 499011, 499012, 499013, 499014, 499015, 499016, 499017, 499018, 499019, 499020, 499021, 499022, 499023, 499024,
					499025, 499026, 499027, 499028, 499029, 499030, 499031, 499032, 499033, 499034, 499035, 499036, 499037, 499038, 499039, 499040, 499041, 499042, 499043, 499044, 499045,
					499046, 499047, 499048, 499049, 499050, 499051, 499052, 499053, 499054, 499055, 499056, 499057, 499058, 499059, 499060, 499061, 499062, 499063, 499064, 499065, 499066,
					499067, 499068, 499069, 499070, 499071, 499072, 499073, 499074, 499075, 499076, 499077, 499078, 499079, 499080, 499081, 499082, 499083, 499084, 499085, 499086, 499087,
					499088, 499089, 499090, 499091, 499092, 499093, 499094, 499095, 499096, 499097, 499098, 499099, 499100, 499101, 499102, 499103, 499104, 499105, 499106, 499107, 499108,
					499109, 499110, 499111, 499112, 499113, 499114, 499115, 499116, 499117, 499118, 499119, 499120, 499121, 499122, 499123, 499124, 499125, 499126, 499127, 499128, 499129,
					499130, 499131, 499132, 499133, 499134, 499135, 499136, 499137, 499138, 499139, 499140, 499141, 499142, 499143, 499144, 499145, 499146, 499147, 499148, 499149, 499150,
					499151, 499152, 499153, 499154, 499155, 499156, 499157, 499158, 499159, 499160, 499161, 499162, 499163, 499164, 499165, 499166, 499167, 499168, 499169, 499170, 499171,
					499172, 499173, 499174, 499175, 499176, 499177, 499178, 499179, 499180, 499181, 499182, 499183, 499184, 499185, 499186, 499187, 499188, 499189, 499190, 499191, 499192,
					499193, 499194, 499195, 499196, 499197, 499198, 499199, 499200, 499201, 499202, 499203, 499204, 499205, 499206, 499207, 499208, 499209, 499210, 499211, 499212, 499213,
					499214, 499215, 499216, 499217, 499218, 499219, 499220, 499221, 499222, 499223, 499224, 499225, 499226, 499227, 499228, 499229, 499230, 499231, 499232, 499233, 499234,
					499235, 499236, 499237, 499238, 499239, 499240, 499241, 499242, 499243, 499244, 499245, 499246, 499247, 499248, 499249, 499250, 499251, 499252, 499253, 499254, 499255,
					499256, 499257, 499258, 499259, 499260, 499261, 499262, 499263, 499264, 499265, 499266, 499267, 499268, 499269, 499270, 499271, 499272, 499273, 499274, 499275, 499276,
					499277, 499278, 499279, 499280, 499281, 499282, 499283, 499284, 499285, 499286, 499287, 499288, 499289, 499290, 499291, 499292, 499293, 499294, 499295, 499296, 499297,
					499298, 499299, 499300, 499301, 499302, 499303, 499304, 499305, 499306, 499307, 499308, 499309, 499310, 499311, 499312, 499313, 499314, 499315, 499316, 499317, 499318,
					499319, 499320, 499321, 499322, 499323, 499324, 499325, 499326, 499327, 499328, 499329, 499330, 499331, 499332, 499333, 499334, 499335, 499336, 499337, 499338, 499339,
					499340, 499341, 499342, 499343, 499344, 499345, 499346, 499347, 499348, 499349, 499350, 499351, 499352, 499353, 499354, 499355, 499356, 499357, 499358, 499359, 499360,
					499361, 499362, 499363, 499364, 499365, 499366, 499367, 499368, 499369, 499370, 499371, 499372, 499373, 499374, 499375, 499376, 499377, 499378, 499379, 499380, 499381,
					499382, 499383, 499384, 499385, 499386, 499387, 499388, 499389, 499390, 499391, 499392, 499393, 499394, 499395, 499396, 499397, 499398, 499399, 499400, 499401, 499402,
					499403, 499404, 499405, 499406, 499407, 499408, 499409, 499410, 499411, 499412, 499413, 499414, 499415, 499416, 499417, 499418, 499419, 499420, 499421, 499422, 499423,
					499424, 499425, 499426, 499427, 499428, 499429, 499430, 499431, 499432, 499433, 499434, 499435, 499436, 499437, 499438, 499439, 499440, 499441, 499442, 499443, 499444,
					499445, 499446, 499447, 499448, 499449, 499450, 499451, 499, 499453, 499454, 4994, 499456, 9457, 499458, 499459, 499460, 499461, 499462, 499463, 9464, 99465};
			int sum=0;
			long startTime = System.currentTimeMillis();
			//Integer[] A = new Integer[] {0,2,7,1,3};
			
			SubSetSum subsetSum = new SubSetSum();
			subsetSum.sort(A);
			System.out.println();
			System.out.print("[The Sorted Array] [Merge Sort]: \n");
			for(int y: A) System.out.print(y + " ");

			do{
				sum=B[x];
				System.out.println("\nNew set of condition: "+ subSetDP(A, sum) + "     Loop run for: "+x+"    sum=  " +sum);
				x++;
			}while(x<100);
			long endTime   = System.currentTimeMillis();
			long totalTime = endTime - startTime;
			System.out.println(totalTime);
		
		}
}
